{"version":3,"file":"autocomplete.es.min.js","sources":["autocomplete.ts"],"sourcesContent":["/**\r\n * Copyright (c) 2016 Denis Taran\r\n * \r\n * Homepage: https://smartscheduling.com/en/documentation/autocomplete\r\n * Source: https://github.com/denis-taran/autocomplete\r\n * \r\n * MIT License\r\n */\r\n\r\nexport const enum EventTrigger {\r\n    Keyboard = 0,\r\n    Focus = 1,\r\n    Mouse = 2,\r\n    /**\r\n     * Fetch is triggered manually by calling `fetch` function returned in `AutocompleteResult`\r\n     */\r\n    Manual = 3\r\n}\r\n\r\n/**\r\n * Enum for controlling form submission when `ENTER` key is pressed in the autocomplete input field.\r\n */\r\nexport const enum PreventSubmit {\r\n    Never = 0,\r\n    Always = 1,\r\n    /**\r\n     * Form submission is prevented only when an item is selected from the autocomplete list.\r\n     */\r\n    OnSelect = 2\r\n}\r\n\r\nexport interface AutocompleteItem {\r\n    label?: string;\r\n    group?: string;\r\n}\r\n\r\nexport interface AutocompleteEvent<T extends Event> {\r\n    /**\r\n     * Native event object passed by browser to the event handler\r\n     */\r\n    event: T;\r\n\r\n    /**\r\n     * Fetch data and display autocomplete\r\n     */\r\n    fetch: () => void;\r\n}\r\n\r\nexport interface AutocompleteSettings<T extends AutocompleteItem> {\r\n    /**\r\n     * Autocomplete will be attached to this element.\r\n     */\r\n    input: HTMLInputElement | HTMLTextAreaElement;\r\n\r\n    /**\r\n     * Provide your own container for the widget.\r\n     * If not specified, a new DIV element will be created.\r\n     */\r\n    container?: HTMLDivElement;\r\n\r\n    /**\r\n     * This method allows you to override the default rendering function for items.\r\n     * It must return a DIV element or undefined to skip rendering.\r\n     */\r\n    render?: (item: T, currentValue: string, index: number) => HTMLDivElement | undefined;\r\n\r\n    /**\r\n     * This method allows you to override the default rendering function for item groups.\r\n     * It must return a DIV element or undefined to skip rendering.\r\n     */\r\n    renderGroup?: (name: string, currentValue: string) => HTMLDivElement | undefined;\r\n\r\n    /**\r\n     * If specified, the autocomplete DOM element will have this class assigned to it.\r\n     */\r\n    className?: string;\r\n\r\n    /**\r\n     * Specify the minimum text length required to show autocomplete.\r\n     */\r\n    minLength?: number;\r\n\r\n    /**\r\n     * The message that will be showed when there are no suggestions that match the entered value.\r\n     */\r\n    emptyMsg?: string;\r\n\r\n    /**\r\n     * This method will be called when user choose an item in autocomplete. The selected item will be passed as the first parameter.\r\n     */\r\n    onSelect: (item: T, input: HTMLInputElement | HTMLTextAreaElement) => void;\r\n\r\n    /**\r\n     * Show autocomplete on focus event. Focus event will ignore the `minLength` property and will always call `fetch`.\r\n     */\r\n    showOnFocus?: boolean;\r\n\r\n    /**\r\n     * This method will be called to prepare suggestions and then pass them to autocomplete.\r\n     * @param {string} text - text in the input field\r\n     * @param {(items: T[] | false) => void} update - a callback function that must be called after suggestions are prepared\r\n     * @param {EventTrigger} trigger - type of the event that triggered the fetch\r\n     * @param {number} cursorPos - position of the cursor in the input field\r\n     */\r\n    fetch: (text: string, update: (items: T[] | false) => void, trigger: EventTrigger, cursorPos: number) => void;\r\n\r\n    /**\r\n     * Enforces that the fetch function will only be called once within the specified time frame (in milliseconds) and\r\n     * delays execution. This prevents flooding your server with AJAX requests.\r\n     */\r\n    debounceWaitMs?: number;\r\n\r\n    /**\r\n     * Callback for additional autocomplete customization\r\n     * @param {HTMLInputElement | HTMLTextAreaElement} input - input box associated with autocomplete\r\n     * @param {ClientRect | DOMRect} inputRect - size of the input box and its position relative to the viewport\r\n     * @param {HTMLDivElement} container - container with suggestions\r\n     * @param {number} maxHeight - max height that can be used by autocomplete\r\n     */\r\n    customize?: (input: HTMLInputElement | HTMLTextAreaElement, inputRect: ClientRect | DOMRect, container: HTMLDivElement, maxHeight: number) => void;\r\n\r\n    /**\r\n     * Controls form submission when the ENTER key is pressed in a input field.\r\n     */\r\n    preventSubmit?: PreventSubmit;\r\n\r\n    /**\r\n     * Prevents the first item in the list from being selected automatically. This option allows you\r\n     * to submit a custom text by pressing ENTER even when autocomplete is displayed.\r\n     */\r\n    disableAutoSelect?: boolean;\r\n\r\n    /**\r\n     * Provide your keyup event handler to display autocomplete when a key is pressed that doesn't modify the content. You can also perform some additional actions.\r\n     */\r\n    keyup?: (e: AutocompleteEvent<KeyboardEvent>) => void;\r\n\r\n    /**\r\n     * Allows to display autocomplete on mouse clicks or perform some additional actions.\r\n     */\r\n    click?: (e: AutocompleteEvent<MouseEvent>) => void;\r\n}\r\n\r\nexport interface AutocompleteResult {\r\n    /**\r\n     * Remove event handlers, DOM elements and ARIA/accessibility attributes created by the widget.\r\n     */\r\n    destroy: () => void;\r\n\r\n    /**\r\n     * This function allows to manually start data fetching and display autocomplete. Note that\r\n     * it does not automatically place focus on the input field, so you may need to do so manually\r\n     * in certain situations.\r\n     */\r\n    fetch: () => void;\r\n\r\n    /**\r\n     * Clear autocomplete state and hide container\r\n     */\r\n    hide: () => void;\r\n\r\n    /**\r\n     * Update autocomplete position\r\n     */\r\n    updatePosition: () => void;\r\n\r\n    /**\r\n     * Redraw the autocomplete div element with suggestions\r\n     */\r\n    redraw: () => void;\r\n\r\n    /**\r\n     * Redraw the autocomplete div element with suggestions if the element is currently being displayed\r\n     */\r\n    redrawIfDisplayed: () => void;\r\n\r\n}\r\n\r\nexport default function autocomplete<T extends AutocompleteItem>(settings: AutocompleteSettings<T>): AutocompleteResult {\r\n\r\n    // just an alias to minimize JS file size\r\n    const doc = document;\r\n\r\n    const container: HTMLDivElement = settings.container || doc.createElement('div');\r\n    const preventSubmit: PreventSubmit = settings.preventSubmit || PreventSubmit.Never;\r\n\r\n    container.id = container.id || 'autocomplete-' + uid();\r\n    const containerStyle = container.style;\r\n    const debounceWaitMs = settings.debounceWaitMs || 0;\r\n    const disableAutoSelect = settings.disableAutoSelect || false;\r\n    const customContainerParent = container.parentElement;\r\n\r\n    let items: T[] = [];\r\n    let inputValue = '';\r\n    let minLen = 2;\r\n    const showOnFocus = settings.showOnFocus;\r\n    let selected: T | undefined;\r\n    let fetchCounter = 0;\r\n    let debounceTimer: number | undefined;\r\n    let destroyed = false;\r\n\r\n    // Fixes #104: autocomplete selection is broken on Firefox for Android\r\n    let suppressAutocomplete = false;\r\n\r\n    if (settings.minLength !== undefined) {\r\n        minLen = settings.minLength;\r\n    }\r\n\r\n    if (!settings.input) {\r\n        throw new Error('input undefined');\r\n    }\r\n\r\n    const input: HTMLInputElement | HTMLTextAreaElement = settings.input;\r\n\r\n    container.className = [container.className, 'autocomplete', settings.className || ''].join(' ').trim();\r\n    container.setAttribute('role', 'listbox');\r\n\r\n    input.setAttribute('role', 'combobox');\r\n    input.setAttribute('aria-expanded', 'false');\r\n    input.setAttribute('aria-autocomplete', 'list');\r\n    input.setAttribute('aria-controls', container.id);\r\n    input.setAttribute('aria-owns', container.id);\r\n    input.setAttribute('aria-activedescendant', '');\r\n    input.setAttribute('aria-haspopup', 'listbox');\r\n\r\n    // IOS implementation for fixed positioning has many bugs, so we will use absolute positioning\r\n    containerStyle.position = 'absolute';\r\n\r\n    /**\r\n     * Generate a very complex textual ID that greatly reduces the chance of a collision with another ID or text.\r\n     */\r\n    function uid(): string {\r\n        return Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n    }\r\n\r\n    /**\r\n     * Detach the container from DOM\r\n     */\r\n    function detach() {\r\n        const parent = container.parentNode;\r\n        if (parent) {\r\n            parent.removeChild(container);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear debouncing timer if assigned\r\n     */\r\n    function clearDebounceTimer() {\r\n        if (debounceTimer) {\r\n            window.clearTimeout(debounceTimer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the container to DOM\r\n     */\r\n    function attach() {\r\n        if (!container.parentNode) {\r\n            (customContainerParent || doc.body).appendChild(container);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if container for autocomplete is displayed\r\n     */\r\n    function containerDisplayed(): boolean {\r\n        return !!container.parentNode;\r\n    }\r\n\r\n    /**\r\n     * Clear autocomplete state and hide container\r\n     */\r\n    function clear() {\r\n        // prevent the update call if there are pending AJAX requests\r\n        fetchCounter++;\r\n\r\n        items = [];\r\n        inputValue = '';\r\n        selected = undefined;\r\n        input.setAttribute('aria-activedescendant', '');\r\n        input.setAttribute('aria-expanded', 'false');\r\n        detach();\r\n    }\r\n\r\n    /**\r\n     * Update autocomplete position\r\n     */\r\n    function updatePosition() {\r\n        if (!containerDisplayed()) {\r\n            return;\r\n        }\r\n\r\n        input.setAttribute('aria-expanded', 'true');\r\n\r\n        containerStyle.height = 'auto';\r\n        containerStyle.width = input.offsetWidth + 'px';\r\n\r\n        let maxHeight = 0;\r\n        let inputRect: DOMRect | undefined;\r\n\r\n        function calc() {\r\n            const docEl = doc.documentElement as HTMLElement;\r\n            const clientTop = docEl.clientTop || doc.body.clientTop || 0;\r\n            const clientLeft = docEl.clientLeft || doc.body.clientLeft || 0;\r\n            const scrollTop = window.pageYOffset || docEl.scrollTop;\r\n            const scrollLeft = window.pageXOffset || docEl.scrollLeft;\r\n\r\n            inputRect = input.getBoundingClientRect();\r\n\r\n            const top = inputRect.top + input.offsetHeight + scrollTop - clientTop;\r\n            const left = inputRect.left + scrollLeft - clientLeft;\r\n\r\n            containerStyle.top = top + 'px';\r\n            containerStyle.left = left + 'px';\r\n\r\n            maxHeight = window.innerHeight - (inputRect.top + input.offsetHeight);\r\n\r\n            if (maxHeight < 0) {\r\n                maxHeight = 0;\r\n            }\r\n\r\n            containerStyle.top = top + 'px';\r\n            containerStyle.bottom = '';\r\n            containerStyle.left = left + 'px';\r\n            containerStyle.maxHeight = maxHeight + 'px';\r\n        }\r\n\r\n        // the calc method must be called twice, otherwise the calculation may be wrong on resize event (chrome browser)\r\n        calc();\r\n        calc();\r\n\r\n        if (settings.customize && inputRect) {\r\n            settings.customize(input, inputRect, container, maxHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redraw the autocomplete div element with suggestions\r\n     */\r\n    function update() {\r\n\r\n        container.textContent = '';\r\n        input.setAttribute('aria-activedescendant', '');\r\n\r\n        // function for rendering autocomplete suggestions\r\n        let render = function (item: T, _: string, __: number): HTMLDivElement | undefined {\r\n            const itemElement = doc.createElement('div');\r\n            itemElement.textContent = item.label || '';\r\n            return itemElement;\r\n        };\r\n        if (settings.render) {\r\n            render = settings.render;\r\n        }\r\n\r\n        // function to render autocomplete groups\r\n        let renderGroup = function (groupName: string, _: string): HTMLDivElement | undefined {\r\n            const groupDiv = doc.createElement('div');\r\n            groupDiv.textContent = groupName;\r\n            return groupDiv;\r\n        };\r\n        if (settings.renderGroup) {\r\n            renderGroup = settings.renderGroup;\r\n        }\r\n\r\n        const fragment = doc.createDocumentFragment();\r\n        let prevGroup = uid();\r\n\r\n        items.forEach(function (item: T, index: number): void {\r\n            if (item.group && item.group !== prevGroup) {\r\n                prevGroup = item.group;\r\n                const groupDiv = renderGroup(item.group, inputValue);\r\n                if (groupDiv) {\r\n                    groupDiv.className += ' group';\r\n                    fragment.appendChild(groupDiv);\r\n                }\r\n            }\r\n            const div = render(item, inputValue, index);\r\n            if (div) {\r\n                div.id = `${container.id}_${index}`;\r\n                div.setAttribute('role', 'option');\r\n                div.addEventListener('click', function (ev: MouseEvent): void {\r\n                    suppressAutocomplete = true;\r\n                    try {\r\n                        settings.onSelect(item, input);\r\n                    } finally {\r\n                        suppressAutocomplete = false;\r\n                    }\r\n                    clear();\r\n                    ev.preventDefault();\r\n                    ev.stopPropagation();\r\n                });\r\n                if (item === selected) {\r\n                    div.className += ' selected';\r\n                    div.setAttribute('aria-selected', 'true');\r\n                    input.setAttribute('aria-activedescendant', div.id);\r\n                }\r\n                fragment.appendChild(div);\r\n            }\r\n        });\r\n        container.appendChild(fragment);\r\n        if (items.length < 1) {\r\n            if (settings.emptyMsg) {\r\n                const empty = doc.createElement('div');\r\n                empty.id = `${container.id}_${uid()}`;\r\n                empty.className = 'empty';\r\n                empty.textContent = settings.emptyMsg;\r\n                container.appendChild(empty);\r\n                input.setAttribute('aria-activedescendant', empty.id);\r\n            } else {\r\n                clear();\r\n                return;\r\n            }\r\n        }\r\n\r\n        attach();\r\n        updatePosition();\r\n\r\n        updateScroll();\r\n    }\r\n\r\n    function updateIfDisplayed() {\r\n        if (containerDisplayed()) {\r\n            update();\r\n        }\r\n    }\r\n\r\n    function resizeEventHandler() {\r\n        updateIfDisplayed();\r\n    }\r\n\r\n    function scrollEventHandler(e: Event) {\r\n        if (e.target !== container) {\r\n            updateIfDisplayed();\r\n        } else {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    function inputEventHandler() {\r\n        if (!suppressAutocomplete) {\r\n            fetch(EventTrigger.Keyboard);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Automatically move scroll bar if selected item is not visible\r\n     */\r\n    function updateScroll() {\r\n        const elements = container.getElementsByClassName('selected');\r\n        if (elements.length > 0) {\r\n            let element = elements[0] as HTMLDivElement;\r\n\r\n            // make group visible\r\n            const previous = element.previousElementSibling as HTMLDivElement;\r\n            if (previous && previous.className.indexOf('group') !== -1 && !previous.previousElementSibling) {\r\n                element = previous;\r\n            }\r\n\r\n            if (element.offsetTop < container.scrollTop) {\r\n                container.scrollTop = element.offsetTop;\r\n            } else {\r\n                const selectBottom = element.offsetTop + element.offsetHeight;\r\n                const containerBottom = container.scrollTop + container.offsetHeight;\r\n                if (selectBottom > containerBottom) {\r\n                    container.scrollTop += selectBottom - containerBottom;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function selectPreviousSuggestion() {\r\n        const index = items.indexOf(selected!);\r\n\r\n        selected = index === -1\r\n            ? undefined\r\n            : items[(index + items.length - 1) % items.length];\r\n\r\n        updateSelectedSuggestion(index);\r\n    }\r\n\r\n    function selectNextSuggestion() {\r\n        const index = items.indexOf(selected!);\r\n\r\n        selected = items.length < 1\r\n            ? undefined\r\n            : index === -1\r\n                ? items[0]\r\n                : items[(index + 1) % items.length];\r\n\r\n        updateSelectedSuggestion(index);\r\n    }\r\n\r\n    function updateSelectedSuggestion(index: number) {\r\n        if (items.length > 0) {\r\n            unselectSuggestion(index);\r\n            selectSuggestion(items.indexOf(selected!));\r\n            updateScroll();\r\n        }\r\n    }\r\n\r\n    function selectSuggestion(index: number) {\r\n        var element = doc.getElementById(container.id + \"_\" + index);\r\n        if (element) {\r\n            element.classList.add('selected');\r\n            element.setAttribute('aria-selected', 'true');\r\n            input.setAttribute('aria-activedescendant', element.id);\r\n        }\r\n    }\r\n\r\n    function unselectSuggestion(index: number) {\r\n        var element = doc.getElementById(container.id + \"_\" + index);\r\n        if (element) {\r\n            element.classList.remove('selected');\r\n            element.removeAttribute('aria-selected');\r\n            input.removeAttribute('aria-activedescendant');\r\n        }\r\n    }\r\n\r\n    function handleArrowAndEscapeKeys(ev: KeyboardEvent, key: 'ArrowUp' | 'ArrowDown' | 'Escape') {\r\n        const containerIsDisplayed = containerDisplayed();\r\n\r\n        if (key === 'Escape') {\r\n            clear();\r\n        } else {\r\n            if (!containerIsDisplayed || items.length < 1) {\r\n                return;\r\n            }\r\n            key === 'ArrowUp'\r\n                ? selectPreviousSuggestion()\r\n                : selectNextSuggestion();\r\n        }\r\n\r\n        ev.preventDefault();\r\n\r\n        if (containerIsDisplayed) {\r\n            ev.stopPropagation();\r\n        }\r\n    }\r\n\r\n    function handleEnterKey(ev: KeyboardEvent) {\r\n        if (selected) {\r\n            if (preventSubmit === PreventSubmit.OnSelect) {\r\n                ev.preventDefault();\r\n            }\r\n            suppressAutocomplete = true;\r\n            try {\r\n                settings.onSelect(selected, input);\r\n            } finally {\r\n                suppressAutocomplete = false;\r\n            }\r\n            clear();\r\n        }\r\n\r\n        if (preventSubmit === PreventSubmit.Always) {\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    function keydownEventHandler(ev: KeyboardEvent) {\r\n        const key = ev.key;\r\n\r\n        switch (key) {\r\n            case 'ArrowUp':\r\n            case 'ArrowDown':\r\n            case 'Escape':\r\n                handleArrowAndEscapeKeys(ev, key);\r\n                break;\r\n            case 'Enter':\r\n                handleEnterKey(ev);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function focusEventHandler() {\r\n        if (showOnFocus) {\r\n            fetch(EventTrigger.Focus);\r\n        }\r\n    }\r\n\r\n    function fetch(trigger: EventTrigger) {\r\n        if (input.value.length >= minLen || trigger === EventTrigger.Focus) {\r\n            clearDebounceTimer();\r\n            debounceTimer = window.setTimeout(\r\n                () => startFetch(input.value, trigger, input.selectionStart || 0),\r\n                trigger === EventTrigger.Keyboard || trigger === EventTrigger.Mouse ? debounceWaitMs : 0);\r\n        } else {\r\n            clear();\r\n        }\r\n    }\r\n\r\n    function startFetch(inputText: string, trigger: EventTrigger, cursorPos: number) {\r\n        if (destroyed) return;\r\n        const savedFetchCounter = ++fetchCounter;\r\n        settings.fetch(inputText, function (elements: T[] | false): void {\r\n            if (fetchCounter === savedFetchCounter && elements) {\r\n                items = elements;\r\n                inputValue = inputText;\r\n                selected = (items.length < 1 || disableAutoSelect) ? undefined : items[0];\r\n                update();\r\n            }\r\n        }, trigger, cursorPos);\r\n    }\r\n\r\n    function keyupEventHandler(e: KeyboardEvent) {\r\n        if (settings.keyup) {\r\n            settings.keyup({\r\n                event: e,\r\n                fetch: () => fetch(EventTrigger.Keyboard)\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!containerDisplayed() && e.key === 'ArrowDown') {\r\n            fetch(EventTrigger.Keyboard);\r\n        }\r\n    }\r\n\r\n    function clickEventHandler(e: MouseEvent) {\r\n        settings.click && settings.click({\r\n            event: e,\r\n            fetch: () => fetch(EventTrigger.Mouse)\r\n        });\r\n    }\r\n\r\n    function blurEventHandler() {\r\n        // when an item is selected by mouse click, the blur event will be initiated before the click event and remove DOM elements,\r\n        // so that the click event will never be triggered. In order to avoid this issue, DOM removal should be delayed.\r\n        setTimeout(() => {\r\n            if (doc.activeElement !== input) {\r\n                clear();\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    function manualFetch() {\r\n        startFetch(input.value, EventTrigger.Manual, input.selectionStart || 0);\r\n    }\r\n\r\n    /**\r\n     * Fixes #26: on long clicks focus will be lost and onSelect method will not be called\r\n     */\r\n    container.addEventListener('mousedown', function (evt: Event) {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n    });\r\n\r\n    /**\r\n     * Fixes #30: autocomplete closes when scrollbar is clicked in IE\r\n     * See: https://stackoverflow.com/a/9210267/13172349\r\n     */\r\n    container.addEventListener('focus', () => input.focus());\r\n\r\n    // If the custom autocomplete container is already appended to the DOM during widget initialization, detach it.\r\n    detach();\r\n\r\n    /**\r\n     * This function will remove DOM elements and clear event handlers\r\n     */\r\n    function destroy() {\r\n        input.removeEventListener('focus', focusEventHandler);\r\n        input.removeEventListener('keyup', keyupEventHandler as EventListenerOrEventListenerObject)\r\n        input.removeEventListener('click', clickEventHandler as EventListenerOrEventListenerObject)\r\n        input.removeEventListener('keydown', keydownEventHandler as EventListenerOrEventListenerObject);\r\n        input.removeEventListener('input', inputEventHandler as EventListenerOrEventListenerObject);\r\n        input.removeEventListener('blur', blurEventHandler);\r\n        window.removeEventListener('resize', resizeEventHandler);\r\n        doc.removeEventListener('scroll', scrollEventHandler, true);\r\n        input.removeAttribute('role');\r\n        input.removeAttribute('aria-expanded');\r\n        input.removeAttribute('aria-autocomplete');\r\n        input.removeAttribute('aria-controls');\r\n        input.removeAttribute('aria-activedescendant');\r\n        input.removeAttribute('aria-owns');\r\n        input.removeAttribute('aria-haspopup');\r\n        clearDebounceTimer();\r\n        clear();\r\n        destroyed = true;\r\n    }\r\n\r\n    // setup event handlers\r\n    input.addEventListener('keyup', keyupEventHandler as EventListenerOrEventListenerObject);\r\n    input.addEventListener('click', clickEventHandler as EventListenerOrEventListenerObject);\r\n    input.addEventListener('keydown', keydownEventHandler as EventListenerOrEventListenerObject);\r\n    input.addEventListener('input', inputEventHandler as EventListenerOrEventListenerObject);\r\n    input.addEventListener('blur', blurEventHandler);\r\n    input.addEventListener('focus', focusEventHandler);\r\n    window.addEventListener('resize', resizeEventHandler);\r\n    doc.addEventListener('scroll', scrollEventHandler, true);\r\n\r\n    return {\r\n        destroy,\r\n        fetch: manualFetch,\r\n        hide: clear,\r\n        updatePosition,\r\n        redraw: update,\r\n        redrawIfDisplayed: updateIfDisplayed\r\n    };\r\n}\r\n"],"names":["autocomplete","settings","doc","document","container","createElement","preventSubmit","id","uid","selected","debounceTimer","containerStyle","style","debounceWaitMs","disableAutoSelect","customContainerParent","parentElement","items","inputValue","minLen","showOnFocus","fetchCounter","destroyed","suppressAutocomplete","undefined","minLength","input","Error","Date","now","toString","Math","random","substring","detach","parent","parentNode","removeChild","clearDebounceTimer","window","clearTimeout","containerDisplayed","clear","setAttribute","updatePosition","height","width","offsetWidth","inputRect","maxHeight","calc","customize","docEl","documentElement","clientTop","body","clientLeft","scrollTop","pageYOffset","scrollLeft","pageXOffset","top","getBoundingClientRect","offsetHeight","left","innerHeight","bottom","update","textContent","render","item","_","__","itemElement","label","renderGroup","groupName","groupDiv","fragment","createDocumentFragment","prevGroup","forEach","index","group","className","appendChild","div","addEventListener","ev","onSelect","preventDefault","stopPropagation","length","emptyMsg","empty","updateScroll","updateIfDisplayed","resizeEventHandler","scrollEventHandler","e","target","inputEventHandler","fetch","elements","getElementsByClassName","element","previous","previousElementSibling","indexOf","offsetTop","selectBottom","containerBottom","updateSelectedSuggestion","getElementById","classList","remove","removeAttribute","unselectSuggestion","add","selectSuggestion","handleArrowAndEscapeKeys","key","containerIsDisplayed","selectNextSuggestion","keydownEventHandler","handleEnterKey","focusEventHandler","trigger","value","setTimeout","startFetch","selectionStart","inputText","cursorPos","savedFetchCounter","keyupEventHandler","keyup","event","clickEventHandler","click","blurEventHandler","activeElement","join","trim","position","evt","focus","destroy","removeEventListener","hide","redraw","redrawIfDisplayed"],"mappings":";;;;;;;;SAkLwBA,EAAyCC,GAG7D,IAAMC,EAAMC,SAENC,EAA4BH,EAASG,WAAaF,EAAIG,cAAc,OACpEC,EAA+BL,EAASK,iBAE9CF,EAAUG,GAAKH,EAAUG,IAAM,gBAAkBC,IACjD,IASIC,EAEAC,EAXEC,EAAiBP,EAAUQ,MAC3BC,EAAiBZ,EAASY,gBAAkB,EAC5CC,EAAoBb,EAASa,oBAAqB,EAClDC,EAAwBX,EAAUY,cAEpCC,EAAa,GACbC,EAAa,GACbC,EAAS,EACPC,EAAcnB,EAASmB,YAEzBC,EAAe,EAEfC,GAAY,EAGZC,GAAuB,EAM3B,QAJ2BC,IAAvBvB,EAASwB,YACTN,EAASlB,EAASwB,YAGjBxB,EAASyB,MACV,MAAM,IAAIC,MAAM,mBAGpB,IAAMD,EAAgDzB,EAASyB,MAmB/D,SAASlB,IACL,OAAOoB,KAAKC,MAAMC,SAAS,IAAMC,KAAKC,SAASF,SAAS,IAAIG,UAAU,GAM1E,SAASC,IACL,IAAMC,EAAS/B,EAAUgC,WACrBD,GACAA,EAAOE,YAAYjC,GAO3B,SAASkC,IACD5B,GACA6B,OAAOC,aAAa9B,GAgB5B,SAAS+B,IACL,QAASrC,EAAUgC,WAMvB,SAASM,IAELrB,IAEAJ,EAAQ,GACRC,EAAa,GACbT,OAAWe,EACXE,EAAMiB,aAAa,wBAAyB,IAC5CjB,EAAMiB,aAAa,gBAAiB,SACpCT,IAMJ,SAASU,IACL,GAAKH,IAAL,CAIAf,EAAMiB,aAAa,gBAAiB,QAEpChC,EAAekC,OAAS,OACxBlC,EAAemC,MAAQpB,EAAMqB,YAAc,KAE3C,IACIC,EADAC,EAAY,EA+BhBC,IACAA,IAEIjD,EAASkD,WAAaH,GACtB/C,EAASkD,UAAUzB,EAAOsB,EAAW5C,EAAW6C,GAhCpD,SAASC,IACL,IAAME,EAAQlD,EAAImD,gBACZC,EAAYF,EAAME,WAAapD,EAAIqD,KAAKD,WAAa,EACrDE,EAAaJ,EAAMI,YAActD,EAAIqD,KAAKC,YAAc,EACxDC,EAAYlB,OAAOmB,aAAeN,EAAMK,UACxCE,EAAapB,OAAOqB,aAAeR,EAAMO,WAIzCE,GAFNb,EAAYtB,EAAMoC,yBAEID,IAAMnC,EAAMqC,aAAeN,EAAYH,EACvDU,EAAOhB,EAAUgB,KAAOL,EAAaH,EAE3C7C,EAAekD,IAAMA,EAAM,KAC3BlD,EAAeqD,KAAOA,EAAO,MAE7Bf,EAAYV,OAAO0B,aAAejB,EAAUa,IAAMnC,EAAMqC,eAExC,IACZd,EAAY,GAGhBtC,EAAekD,IAAMA,EAAM,KAC3BlD,EAAeuD,OAAS,GACxBvD,EAAeqD,KAAOA,EAAO,KAC7BrD,EAAesC,UAAYA,EAAY,MAe/C,SAASkB,IAEL/D,EAAUgE,YAAc,GACxB1C,EAAMiB,aAAa,wBAAyB,IAG5C,IAAI0B,EAAS,SAAUC,EAASC,EAAWC,GACvC,IAAMC,EAAcvE,EAAIG,cAAc,OAEtC,OADAoE,EAAYL,YAAcE,EAAKI,OAAS,GACjCD,GAEPxE,EAASoE,SACTA,EAASpE,EAASoE,QAItB,IAAIM,EAAc,SAAUC,EAAmBL,GAC3C,IAAMM,EAAW3E,EAAIG,cAAc,OAEnC,OADAwE,EAAST,YAAcQ,EAChBC,GAEP5E,EAAS0E,cACTA,EAAc1E,EAAS0E,aAG3B,IAAMG,EAAW5E,EAAI6E,yBACjBC,EAAYxE,IAmChB,GAjCAS,EAAMgE,SAAQ,SAAUX,EAASY,GAC7B,GAAIZ,EAAKa,OAASb,EAAKa,QAAUH,EAAW,CACxCA,EAAYV,EAAKa,MACjB,IAAMN,EAAWF,EAAYL,EAAKa,MAAOjE,GACrC2D,IACAA,EAASO,WAAa,SACtBN,EAASO,YAAYR,IAG7B,IAAMS,EAAMjB,EAAOC,EAAMpD,EAAYgE,GACjCI,IACAA,EAAI/E,GAAQH,EAAUG,OAAM2E,EAC5BI,EAAI3C,aAAa,OAAQ,UACzB2C,EAAIC,iBAAiB,SAAS,SAAUC,GACpCjE,GAAuB,EACvB,IACItB,EAASwF,SAASnB,EAAM5C,WAExBH,GAAuB,EAE3BmB,IACA8C,EAAGE,iBACHF,EAAGG,qBAEHrB,IAAS7D,IACT6E,EAAIF,WAAa,YACjBE,EAAI3C,aAAa,gBAAiB,QAClCjB,EAAMiB,aAAa,wBAAyB2C,EAAI/E,KAEpDuE,EAASO,YAAYC,OAG7BlF,EAAUiF,YAAYP,GAClB7D,EAAM2E,OAAS,EAAG,CAClB,IAAI3F,EAAS4F,SAST,YADAnD,IAPA,IAAMoD,EAAQ5F,EAAIG,cAAc,OAChCyF,EAAMvF,GAAQH,EAAUG,OAAMC,IAC9BsF,EAAMV,UAAY,QAClBU,EAAM1B,YAAcnE,EAAS4F,SAC7BzF,EAAUiF,YAAYS,GACtBpE,EAAMiB,aAAa,wBAAyBmD,EAAMvF,IAtJrDH,EAAUgC,aACVrB,GAAyBb,EAAIqD,MAAM8B,YAAYjF,GA6JpDwC,IAEAmD,IAGJ,SAASC,IACDvD,KACA0B,IAIR,SAAS8B,IACLD,IAGJ,SAASE,EAAmBC,GACpBA,EAAEC,SAAWhG,EACb4F,IAEAG,EAAET,iBAIV,SAASW,IACA9E,GACD+E,KAOR,SAASP,IACL,IAAMQ,EAAWnG,EAAUoG,uBAAuB,YAClD,GAAID,EAASX,OAAS,EAAG,CACrB,IAAIa,EAAUF,EAAS,GAGjBG,EAAWD,EAAQE,uBAKzB,GAJID,IAAqD,IAAzCA,EAAStB,UAAUwB,QAAQ,WAAoBF,EAASC,yBACpEF,EAAUC,GAGVD,EAAQI,UAAYzG,EAAUqD,UAC9BrD,EAAUqD,UAAYgD,EAAQI,cAC3B,CACH,IAAMC,EAAeL,EAAQI,UAAYJ,EAAQ1C,aAC3CgD,EAAkB3G,EAAUqD,UAAYrD,EAAU2D,aACpD+C,EAAeC,IACf3G,EAAUqD,WAAaqD,EAAeC,KA4BtD,SAASC,EAAyB9B,GAC1BjE,EAAM2E,OAAS,KAgBvB,SAA4BV,GACxB,IAAIuB,EAAUvG,EAAI+G,eAAe7G,EAAUG,GAAK,IAAM2E,GAClDuB,IACAA,EAAQS,UAAUC,OAAO,YACzBV,EAAQW,gBAAgB,iBACxB1F,EAAM0F,gBAAgB,0BApBtBC,CAAmBnC,GAM3B,SAA0BA,GACtB,IAAIuB,EAAUvG,EAAI+G,eAAe7G,EAAUG,GAAK,IAAM2E,GAClDuB,IACAA,EAAQS,UAAUI,IAAI,YACtBb,EAAQ9D,aAAa,gBAAiB,QACtCjB,EAAMiB,aAAa,wBAAyB8D,EAAQlG,KAVpDgH,CAAiBtG,EAAM2F,QAAQnG,IAC/BsF,KAsBR,SAASyB,EAAyBhC,EAAmBiC,GACjD,IAhDMvC,EAgDAwC,EAAuBjF,IAE7B,GAAY,WAARgF,EACA/E,QACG,CACH,IAAKgF,GAAwBzG,EAAM2E,OAAS,EACxC,OAEI,YAAR6B,GAxDEvC,EAAQjE,EAAM2F,QAAQnG,GAE5BA,GAAsB,IAAXyE,OACL1D,EACAP,GAAOiE,EAAQjE,EAAM2E,OAAS,GAAK3E,EAAM2E,QAE/CoB,EAAyB9B,IAG7B,WACI,IAAMA,EAAQjE,EAAM2F,QAAQnG,GAE5BA,EAAWQ,EAAM2E,OAAS,OACpBpE,GACW,IAAX0D,EACIjE,EAAM,GACNA,GAAOiE,EAAQ,GAAKjE,EAAM2E,QAEpCoB,EAAyB9B,GAwCfyC,GAGVnC,EAAGE,iBAECgC,GACAlC,EAAGG,kBAuBX,SAASiC,EAAoBpC,GACzB,IAAMiC,EAAMjC,EAAGiC,IAEf,OAAQA,GACJ,IAAK,UACL,IAAK,YACL,IAAK,SACDD,EAAyBhC,EAAIiC,GAC7B,MACJ,IAAK,SA5Bb,SAAwBjC,GACpB,GAAI/E,EAAU,KACNH,GACAkF,EAAGE,iBAEPnE,GAAuB,EACvB,IACItB,EAASwF,SAAShF,EAAUiB,WAE5BH,GAAuB,EAE3BmB,QAGApC,GACAkF,EAAGE,iBAcCmC,CAAerC,IAO3B,SAASsC,IACD1G,GACAkF,KAIR,SAASA,EAAMyB,GACPrG,EAAMsG,MAAMpC,QAAUzE,OAAU4G,GAChCzF,IACA5B,EAAgB6B,OAAO0F,YACnB,WAAM,OAAAC,EAAWxG,EAAMsG,MAAOD,EAASrG,EAAMyG,gBAAkB,SAC/DJ,OAAqCA,EAAiClH,EAAiB,IAE3F6B,IAIR,SAASwF,EAAWE,EAAmBL,EAAuBM,GAC1D,IAAI/G,EAAJ,CACA,IAAMgH,IAAsBjH,EAC5BpB,EAASqG,MAAM8B,GAAW,SAAU7B,GAC5BlF,IAAiBiH,GAAqB/B,IAEtCrF,EAAakH,EACb3H,GAFAQ,EAAQsF,GAEUX,OAAS,GAAK9E,OAAqBU,EAAYP,EAAM,GACvEkD,OAEL4D,EAASM,IAGhB,SAASE,EAAkBpC,GACnBlG,EAASuI,MACTvI,EAASuI,MAAM,CACXC,MAAOtC,EACPG,MAAO,WAAM,OAAAA,QAKhB7D,KAAkC,cAAV0D,EAAEsB,KAC3BnB,KAIR,SAASoC,EAAkBvC,GACvBlG,EAAS0I,OAAS1I,EAAS0I,MAAM,CAC7BF,MAAOtC,EACPG,MAAO,WAAM,OAAAA,QAIrB,SAASsC,IAGLX,YAAW,WACH/H,EAAI2I,gBAAkBnH,GACtBgB,MAEL,KA0DP,OA9dAtC,EAAUgF,UAAY,CAAChF,EAAUgF,UAAW,eAAgBnF,EAASmF,WAAa,IAAI0D,KAAK,KAAKC,OAChG3I,EAAUuC,aAAa,OAAQ,WAE/BjB,EAAMiB,aAAa,OAAQ,YAC3BjB,EAAMiB,aAAa,gBAAiB,SACpCjB,EAAMiB,aAAa,oBAAqB,QACxCjB,EAAMiB,aAAa,gBAAiBvC,EAAUG,IAC9CmB,EAAMiB,aAAa,YAAavC,EAAUG,IAC1CmB,EAAMiB,aAAa,wBAAyB,IAC5CjB,EAAMiB,aAAa,gBAAiB,WAGpChC,EAAeqI,SAAW,WAka1B5I,EAAUmF,iBAAiB,aAAa,SAAU0D,GAC9CA,EAAItD,kBACJsD,EAAIvD,oBAORtF,EAAUmF,iBAAiB,SAAS,WAAM,OAAA7D,EAAMwH,WAGhDhH,IA2BAR,EAAM6D,iBAAiB,QAASgD,GAChC7G,EAAM6D,iBAAiB,QAASmD,GAChChH,EAAM6D,iBAAiB,UAAWqC,GAClClG,EAAM6D,iBAAiB,QAASc,GAChC3E,EAAM6D,iBAAiB,OAAQqD,GAC/BlH,EAAM6D,iBAAiB,QAASuC,GAChCvF,OAAOgD,iBAAiB,SAAUU,GAClC/F,EAAIqF,iBAAiB,SAAUW,GAAoB,GAE5C,CACHiD,QAhCJ,WACIzH,EAAM0H,oBAAoB,QAAStB,GACnCpG,EAAM0H,oBAAoB,QAASb,GACnC7G,EAAM0H,oBAAoB,QAASV,GACnChH,EAAM0H,oBAAoB,UAAWxB,GACrClG,EAAM0H,oBAAoB,QAAS/C,GACnC3E,EAAM0H,oBAAoB,OAAQR,GAClCrG,OAAO6G,oBAAoB,SAAUnD,GACrC/F,EAAIkJ,oBAAoB,SAAUlD,GAAoB,GACtDxE,EAAM0F,gBAAgB,QACtB1F,EAAM0F,gBAAgB,iBACtB1F,EAAM0F,gBAAgB,qBACtB1F,EAAM0F,gBAAgB,iBACtB1F,EAAM0F,gBAAgB,yBACtB1F,EAAM0F,gBAAgB,aACtB1F,EAAM0F,gBAAgB,iBACtB9E,IACAI,IACApB,GAAY,GAeZgF,MAzDJ,WACI4B,EAAWxG,EAAMsG,QAA4BtG,EAAMyG,gBAAkB,IAyDrEkB,KAAM3G,EACNE,iBACA0G,OAAQnF,EACRoF,kBAAmBvD,EAE3B"}